stages: [build, test, deploy]

variables:
  APP_VERSION: "$CI_COMMIT_SHORT_SHA"

# Si ton runner est "taggé", décommente et adapte ces 2 lignes :
# default:
#   tags: [runner-all]

# ---------- BUILD ----------
build_backend:
  stage: build
  script:
    - docker login "$CI_REGISTRY" -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD"
    - docker build -t "$CI_REGISTRY_IMAGE/backend:$APP_VERSION" ./server
    - docker push "$CI_REGISTRY_IMAGE/backend:$APP_VERSION"
    - |
      if [ "$CI_COMMIT_BRANCH" = "main" ]; then
        docker tag "$CI_REGISTRY_IMAGE/backend:$APP_VERSION" "$CI_REGISTRY_IMAGE/backend:latest"
        docker push "$CI_REGISTRY_IMAGE/backend:latest"
      fi

build_frontend:
  stage: build
  script:
    - docker login "$CI_REGISTRY" -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD"
    - docker build -t "$CI_REGISTRY_IMAGE/frontend:$APP_VERSION" ./client
    - docker push "$CI_REGISTRY_IMAGE/frontend:$APP_VERSION"
    - |
      if [ "$CI_COMMIT_BRANCH" = "main" ]; then
        docker tag "$CI_REGISTRY_IMAGE/frontend:$APP_VERSION" "$CI_REGISTRY_IMAGE/frontend:latest"
        docker push "$CI_REGISTRY_IMAGE/frontend:latest"
      fi

# ---------- TEST ----------
test_backend:
  stage: test
  needs: [build_backend]
  script:
    - echo "TODO: mets tes commandes de tests backend ici (ex: npm test / pytest)"
    # Exemple si tu veux tester l'image elle-même :
    # - docker run --rm "$CI_REGISTRY_IMAGE/backend:$APP_VERSION" npm test
  allow_failure: false

test_frontend:
  stage: test
  needs: [build_frontend]
  script:
    - echo "TODO: mets tes commandes de tests frontend ici"
    # - docker run --rm "$CI_REGISTRY_IMAGE/frontend:$APP_VERSION" npm test
  allow_failure: false

# ---------- DEPLOY ----------
deploy_prod:
  stage: deploy
  # Déploiement manuel sur main (tu peux changer la règle si tu préfères les tags)
  rules:
    - if: '$CI_COMMIT_BRANCH == "main"'
      when: manual
    - when: never
  script:
    - export DEPLOY_DIR=/opt/synergia
    - mkdir -p "$DEPLOY_DIR"

    # 1) Générer le .env utilisé par docker compose (images + secrets)
    - |
      cat > "$DEPLOY_DIR/.env" <<'EOF'
      REGISTRY=${CI_REGISTRY_IMAGE}
      APP_VERSION=${APP_VERSION}
      # Pour environnement offline, tu pourras décommenter et pointer vers tes miroirs internes :
      # REGISTRY_BASE_MYSQL=gitlab.local:5050/base/mysql:8.0
      # REGISTRY_BASE_CADDY=gitlab.local:5050/base/caddy:2-alpine

      DB_ROOT_PASSWORD=${DB_ROOT_PASSWORD}
      DB_NAME=${DB_NAME}
      DB_USER=${DB_USER}
      DB_PASSWORD=${DB_PASSWORD}
      JWT_SECRET=${JWT_SECRET}
      EOF

    # 2) Déploiement
    - cp docker-compose.prod.yml "$DEPLOY_DIR/"
    - cd "$DEPLOY_DIR"
    - docker login "$CI_REGISTRY" -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD"
    - docker compose -f docker-compose.prod.yml pull
    - docker compose -f docker-compose.prod.yml up -d
  environment:
    name: production
    url: http://monapp.local
