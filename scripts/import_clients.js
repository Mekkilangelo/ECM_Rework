#!/usr/bin/env node
/**
 * Script d'import des clients depuis le fichier CSV trait√©
 * Utilise la fonction createClient existante du clientService
 */

const fs = require('fs').promises;
const path = require('path');

// Import des mod√®les et services
const { sequelize } = require('../server/models');
const clientService = require('../server/services/clientService');

/**
 * Lit le fichier JSON contenant les clients trait√©s
 * @param {string} filePath - Chemin vers le fichier JSON
 * @returns {Array} Liste des clients √† importer
 */
async function readClientsData(filePath) {
  try {
    const data = await fs.readFile(filePath, 'utf8');
    return JSON.parse(data);
  } catch (error) {
    throw new Error(`Erreur lors de la lecture du fichier ${filePath}: ${error.message}`);
  }
}

/**
 * Valide les donn√©es d'un client avant import
 * @param {Object} clientData - Donn√©es du client
 * @returns {boolean} true si valide, false sinon
 */
function validateClientData(clientData) {
  if (!clientData.name || !clientData.name.trim()) {
    console.log(`‚ùå Client invalide: nom manquant`);
    return false;
  }
  
  if (!clientData.country) {
    console.log(`‚ùå Client invalide: pays manquant pour ${clientData.name}`);
    return false;
  }
  
  return true;
}

/**
 * Importe un client unique en utilisant createClient
 * @param {Object} clientData - Donn√©es du client
 * @param {number} index - Index du client (pour le suivi)
 * @param {number} total - Nombre total de clients
 * @returns {Object|null} Client cr√©√© ou null en cas d'erreur
 */
async function importSingleClient(clientData, index, total) {
  try {
    // Validation des donn√©es
    if (!validateClientData(clientData)) {
      return null;
    }
    
    console.log(`[${index + 1}/${total}] Import du client: ${clientData.name} (${clientData.country})`);
    
    // Modification du data_status pour 'old' comme demand√©
    // Note: Cette modification sera faite directement dans la transaction
    const clientToCreate = {
      name: clientData.name,
      country: clientData.country,
      city: clientData.city,
      client_group: clientData.client_group,
      address: clientData.address,
      description: clientData.description
    };
    
    // Utiliser la fonction createClient existante
    const newClient = await clientService.createClient(clientToCreate);
    
    // Mettre √† jour le data_status √† 'old' apr√®s cr√©ation
    await sequelize.query(
      'UPDATE nodes SET data_status = :status WHERE id = :nodeId',
      {
        replacements: { status: 'old', nodeId: newClient.id },
        type: sequelize.QueryTypes.UPDATE
      }
    );
    
    console.log(`‚úÖ Client cr√©√© avec succ√®s: ${clientData.name} (ID: ${newClient.id})`);
    return newClient;
    
  } catch (error) {
    if (error.message && error.message.includes('Un client avec ce nom existe d√©j√†')) {
      console.log(`‚ö†Ô∏è  Client d√©j√† existant: ${clientData.name}`);
      return null; // Pas d'erreur, juste d√©j√† existant
    } else {
      console.error(`‚ùå Erreur lors de la cr√©ation du client ${clientData.name}:`, error.message);
      return null;
    }
  }
}

/**
 * Importe tous les clients
 * @param {Array} clientsData - Liste des clients √† importer
 * @returns {Object} Statistiques d'import
 */
async function importAllClients(clientsData) {
  console.log(`\nüöÄ D√©but de l'import de ${clientsData.length} clients...\n`);
  
  const stats = {
    total: clientsData.length,
    created: 0,
    skipped: 0,
    errors: 0
  };
  
  const createdClients = [];
  
  // Import s√©quentiel pour √©viter les conflits de base de donn√©es
  for (let i = 0; i < clientsData.length; i++) {
    const clientData = clientsData[i];
    
    try {
      const result = await importSingleClient(clientData, i, clientsData.length);
      
      if (result) {
        stats.created++;
        createdClients.push(result);
      } else {
        stats.skipped++;
      }
      
      // Petite pause pour √©viter de surcharger la base de donn√©es
      if (i < clientsData.length - 1) {
        await new Promise(resolve => setTimeout(resolve, 100));
      }
      
    } catch (error) {
      stats.errors++;
      console.error(`‚ùå Erreur fatale pour le client ${clientData.name}:`, error);
    }
  }
  
  return { stats, createdClients };
}

/**
 * Affiche un r√©sum√© des op√©rations
 * @param {Object} stats - Statistiques d'import
 * @param {Array} createdClients - Liste des clients cr√©√©s
 */
function displaySummary(stats, createdClients) {
  console.log('\n' + '='.repeat(60));
  console.log('üìä R√âSUM√â DE L\'IMPORT');
  console.log('='.repeat(60));
  console.log(`üìà Total clients trait√©s: ${stats.total}`);
  console.log(`‚úÖ Clients cr√©√©s: ${stats.created}`);
  console.log(`‚ö†Ô∏è  Clients ignor√©s (d√©j√† existants): ${stats.skipped}`);
  console.log(`‚ùå Erreurs: ${stats.errors}`);
  
  if (createdClients.length > 0) {
    console.log('\nüÜï Clients cr√©√©s:');
    createdClients.forEach(client => {
      const clientInfo = client.Client || {};
      console.log(`  - ${client.name} (${clientInfo.country || 'N/A'}) - ID: ${client.id}`);
    });
  }
  
  // Affichage des statistiques par pays
  if (createdClients.length > 0) {
    const countryStats = {};
    createdClients.forEach(client => {
      const country = client.Client?.country || 'UNKNOWN';
      countryStats[country] = (countryStats[country] || 0) + 1;
    });
    
    console.log('\nüåç R√©partition par pays des clients cr√©√©s:');
    Object.entries(countryStats)
      .sort((a, b) => b[1] - a[1])
      .forEach(([country, count]) => {
        console.log(`  ${country}: ${count} clients`);
      });
  }
}

/**
 * Fonction principale
 */
async function main() {
  const startTime = Date.now();
  
  try {
    console.log('üéØ SCRIPT D\'IMPORT DES CLIENTS ECM');
    console.log('================================\n');
    
    // Chemins des fichiers
    const scriptsDir = __dirname;
    const clientsDataFile = path.join(scriptsDir, 'clients_to_import.json');
    
    // V√©rifier que le fichier de donn√©es existe
    try {
      await fs.access(clientsDataFile);
    } catch {
      throw new Error(`Fichier de donn√©es non trouv√©: ${clientsDataFile}\nVeuillez d'abord ex√©cuter le script process_clients_csv.py`);
    }
    
    // Tester la connexion √† la base de donn√©es
    console.log('üîå Test de la connexion √† la base de donn√©es...');
    await sequelize.authenticate();
    console.log('‚úÖ Connexion √† la base de donn√©es √©tablie\n');
    
    // Lire les donn√©es des clients
    console.log('üìñ Lecture des donn√©es des clients...');
    const clientsData = await readClientsData(clientsDataFile);
    console.log(`üìã ${clientsData.length} clients √† traiter\n`);
    
    // V√©rifier s'il y a des clients √† importer
    if (clientsData.length === 0) {
      console.log('‚ö†Ô∏è  Aucun client √† importer');
      return;
    }
    
    // Afficher un aper√ßu des premiers clients
    console.log('üëÄ Aper√ßu des premiers clients:');
    clientsData.slice(0, 5).forEach((client, index) => {
      console.log(`  ${index + 1}. ${client.name} - ${client.country} - ${client.city || 'N/A'}`);
    });
    if (clientsData.length > 5) {
      console.log(`  ... et ${clientsData.length - 5} autres`);
    }
    console.log('');
    
    // Demander confirmation (en mode automatique pour le script)
    console.log('‚ñ∂Ô∏è  D√©marrage de l\'import...\n');
    
    // Importer tous les clients
    const { stats, createdClients } = await importAllClients(clientsData);
    
    // Afficher le r√©sum√©
    displaySummary(stats, createdClients);
    
    const endTime = Date.now();
    const duration = ((endTime - startTime) / 1000).toFixed(2);
    
    console.log(`\n‚è±Ô∏è  Dur√©e totale: ${duration} secondes`);
    console.log(`\nüéâ Import termin√© avec succ√®s!`);
    
  } catch (error) {
    console.error('\nüí• ERREUR FATALE:', error.message);
    console.error(error.stack);
    process.exit(1);
  } finally {
    // Fermer la connexion √† la base de donn√©es
    try {
      await sequelize.close();
      console.log('\nüîå Connexion √† la base de donn√©es ferm√©e');
    } catch (error) {
      console.error('Erreur lors de la fermeture de la connexion:', error.message);
    }
  }
}

// Gestion des signaux pour une fermeture propre
process.on('SIGINT', async () => {
  console.log('\n\n‚ö†Ô∏è  Interruption d√©tect√©e (Ctrl+C)');
  console.log('üîå Fermeture de la connexion √† la base de donn√©es...');
  try {
    await sequelize.close();
  } catch (error) {
    console.error('Erreur lors de la fermeture:', error.message);
  }
  process.exit(0);
});

process.on('SIGTERM', async () => {
  console.log('\n‚ö†Ô∏è  Signal de terminaison re√ßu');
  try {
    await sequelize.close();
  } catch (error) {
    console.error('Erreur lors de la fermeture:', error.message);
  }
  process.exit(0);
});

// Lancer le script
if (require.main === module) {
  main();
}

module.exports = { main, importAllClients, importSingleClient };
